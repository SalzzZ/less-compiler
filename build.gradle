
import org.apache.tools.ant.filters.ReplaceTokens
import org.gradle.plugins.signing.Sign

buildscript {
  repositories {
    mavenCentral()
    jcenter()
  }
}

plugins {
  id 'net.researchgate.release' version '2.0.2'
  id 'com.github.hierynomus.license' version '0.11.0'
  id 'com.glonk.eclipse-checkstyle' version '0.0.4'
  id 'com.github.kt3k.coveralls' version '2.4.0'
}

task wrapper(type: Wrapper) {
  gradleVersion = '2.4'
}

project.ext {
  buildDate = new java.util.Date()
  buildCommit = ('git rev-parse HEAD').execute().text.trim()

  isRelease = !version.endsWith('SNAPSHOT')
  isUpload = false
  isSign = false
}

// Sign release archives
gradle.taskGraph.whenReady { taskGraph ->
  ext.isUpload = taskGraph.allTasks.any { it instanceof Upload }
  ext.isSign = taskGraph.allTasks.any { it instanceof Sign }
  if (isRelease && isUpload && isSign) {
    def password = System.console().readPassword('\n\n\n===>  Signing key password: ')
    allprojects { ext.'signing.password' = password }
  }
}

if (JavaVersion.current().isJava8Compatible()) {
  allprojects {
    tasks.withType(Javadoc) {
      options.addStringOption('Xdoclint:none', '-quiet')
    }
  }
}

def configurePom(def pom) {
  pom.project {
    name 'less-compiler'
    description 'LESS compiler based on less.js'
    url 'https://github.com/squarespace/squarespace-less'

    licenses {
      license {
        name 'The Apache Software License, Version 2.0'
        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
        distribution 'repo'
      }
    }

    scm {
      connection 'scm:git:git@github.com:squarespace/squarespace-less.git'
      url 'scm:git:git@github.com:squarespace/squarespace-less.git'
      developerConnection 'scm:git:git@github.com:squarespace/squarespace-less.git'
    }

    issueManagement {
      system 'github'
      url 'https://github.com/squarespace/squarespace-less/issues'
    }
  }
}

release {
  requireBranch = ''
}

clean {
  delete 'lessc'
}

task makeCli(dependsOn: ':less-cli:makeCli') {
}

subprojects {
  apply plugin: 'java'
  apply plugin: 'eclipse'
  apply plugin: 'checkstyle'
  apply plugin: 'com.glonk.eclipse-checkstyle'
  apply plugin: 'license'
  apply plugin: 'jacoco'
  apply plugin: 'signing'
  apply plugin: 'maven'
  apply plugin: 'com.github.kt3k.coveralls'

  group 'com.squarespace.less'

  sourceCompatibility = 1.7
  targetCompatibility = 1.7

  license {
    header rootProject.file('conf/apache-2.0-header.txt')
    ext.year = Calendar.getInstance().get(Calendar.YEAR)
    skipExistingHeaders true
    include '**/*.java'
  }

  repositories {
    mavenCentral()
  }

  checkstyle {
    toolVersion = '5.7'
    ignoreFailures = false
    configFile = rootProject.file('checkstyle.xml')
  }

  test {
    useTestNG()
    finalizedBy jacocoTestReport
    jacoco {
      append = false
    }
  }

  jacoco {
    toolVersion '0.7.1.201405082137'
  }

  jacocoTestReport {
    group = 'Reporting'
    additionalSourceDirs = files(sourceSets.main.allJava.srcDirs)
    reports {
      html.destination = "${buildDir}/jacoco-report"
    }
  }

  eclipseCheckstyle {
    syncFormatter = true
    exclude = ['derived']
  }

  signing {
    required { isRelease && isUpload }
    sign configurations.archives
  }

  task testJar(type: Jar, dependsOn: testClasses) {
    classifier = 'tests'
    from(
      sourceSets.main.output,
      sourceSets.test.output
    )
  }

  task sourcesJar(type: Jar, dependsOn:classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
  }

  task javadocJar(type: Jar, dependsOn:javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
  }

  processResources {
    from (sourceSets.main.resources.srcDirs) {
      include '**/build.properties'
      filter(ReplaceTokens, tokens: [
        'build.version': project.version,
        'build.date': buildDate.toString(),
        'build.commit': buildCommit
      ])
    }

    from (sourceSets.main.resources.srcDirs) {
      exclude '**/build.properties'
    }
  }

  // Ensure this always runs, to generate fresh build.properties
  processResources.outputs.upToDateWhen{ false }

  uploadArchives {
    repositories.mavenDeployer {
      beforeDeployment { 
        MavenDeployment deployment -> signing.signPom(deployment) 
      }
      repository(url: 'https://oss.sonatype.org/service/local/staging/deploy/maven2/') {
        authentication(
          userName: System.getenv('OSS_USERNAME'),
          password: System.getenv('OSS_PASSWORD')
        )
      }

      snapshotRepository(url: 'https://oss.sonatype.org/content/repositories/snapshots/') {
        authentication(
          userName: System.getenv('OSS_USERNAME'),
          password: System.getenv('OSS_PASSWORD')
        )
      }

      configurePom(pom)
    }
  }

  uploadArchives.dependsOn ':build'

  // TODO: remove once maven central hosting is setup
  if (project.hasProperty('NEXUS_INTERNAL_RELEASE_URL')) {
    task uploadInternal(type: Upload, dependsOn: build) {
      description = 'Uploads archives to internal Nexus'
      configuration = configurations.archives

      repositories.mavenDeployer {
        beforeDeployment { 
          MavenDeployment deployment -> signing.signPom(deployment) 
        }
        repository(url: NEXUS_INTERNAL_RELEASE_URL)
        snapshotRepository(url: NEXUS_INTERNAL_SNAPSHOT_URL)
        configurePom(pom)
      }
    }
  }
}

